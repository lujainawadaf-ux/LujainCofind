# -*- coding: utf-8 -*-
"""Train-yolo11-on-CoFind-dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pc7X2FhbZyIeTu494bsf_uTZycgI4iFF

# **CoFind Aseer**

YOLO11 builds on the advancements introduced in YOLOv9 and YOLOv10 earlier this year, incorporating improved architectural designs, enhanced feature extraction techniques, and optimized training methods.

YOLO11m achieves a higher mean mAP score on the COCO dataset while using 22% fewer parameters than YOLOv8m, making it computationally lighter without sacrificing performance.
"""

!nvidia-smi

"""**NOTE:** To make it easier for us to manage datasets, images and models we create a `HOME` constant."""

import os
HOME = os.getcwd()
print(HOME)

"""## Install YOLO11 via Ultralytics"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install "ultralytics<=8.3.40" supervision roboflow
# prevent ultralytics from tracking your activity
!yolo settings sync=False
import ultralytics
ultralytics.checks()

"""## Inference with model pre-trained on COCO dataset"""

!yolo task=detect mode=predict model=yolo11n.pt conf=0.25 source='https://media.roboflow.com/notebooks/examples/dog.jpeg' save=True

"""**NOTE:** Result annotated image got saved in `{HOME}/runs/detect/predict/`. Let's display it."""

from IPython.display import Image as IPyImage

IPyImage(filename='/content/runs/detect/predict/dog.jpg', width=600)

"""### SDK

"""

from ultralytics import YOLO
from PIL import Image
import requests

model = YOLO('yolo11n.pt')
image = Image.open(requests.get('https://media.roboflow.com/notebooks/examples/dog.jpeg', stream=True).raw)
result = model.predict(image, conf=0.25)[0]

"""**NOTE:** The obtained `result` object stores information about the location, classes, and confidence levels of the detected objects."""

result.boxes.xyxy

result.boxes.conf

result.boxes.cls

"""**NOTE:** YOLO11 can be easily integrated with `supervision` using the familiar `from_ultralytics` connector."""

import supervision as sv

detections = sv.Detections.from_ultralytics(result)

box_annotator = sv.BoxAnnotator()
label_annotator = sv.LabelAnnotator(text_color=sv.Color.BLACK)

annotated_image = image.copy()
annotated_image = box_annotator.annotate(annotated_image, detections=detections)
annotated_image = label_annotator.annotate(annotated_image, detections=detections)

sv.plot_image(annotated_image, size=(10, 10))

"""## Fine-tune YOLO11 on CoFind dataset"""

# Commented out IPython magic to ensure Python compatibility.
!mkdir {HOME}/datasets
# %cd {HOME}/datasets

from google.colab import userdata
from roboflow import Roboflow


rf = Roboflow(api_key="H3uNloapGePGyjUpHsqm")

workspace = rf.workspace("lujainalf")
project = workspace.project("coffee-beans-cofind-owops-qkb7f")
version = project.version(4)
dataset = version.download("yolov11")

"""## Custom Training"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

!yolo task=detect mode=train model=yolo11s.pt data={dataset.location}/data.yaml epochs=24 imgsz=640 plots=True

"""**NOTE:** The results of the completed training are saved in `{HOME}/runs/detect/train/`. Let's examine them."""

!ls {HOME}/runs/detect/train/

from IPython.display import Image as IPyImage

IPyImage(filename=f'{HOME}/runs/detect/train/confusion_matrix.png', width=600)

from IPython.display import Image as IPyImage

IPyImage(filename=f'{HOME}/runs/detect/train/results.png', width=600)

from IPython.display import Image as IPyImage

IPyImage(filename=f'{HOME}/runs/detect/train/val_batch0_pred.jpg', width=600)

"""## Validate fine-tuned model"""

!yolo task=detect mode=val model={HOME}/runs/detect/train/weights/best.pt data={dataset.location}/data.yaml

"""## Inference with custom model"""

!yolo task=detect mode=predict model={HOME}/runs/detect/train/weights/best.pt conf=0.25 source={dataset.location}/test/images save=True

"""**NOTE:** Let's take a look at few results."""

import glob
import os
from IPython.display import Image as IPyImage, display

latest_folder = max(glob.glob(f'{HOME}/runs/detect/predict*/'), key=os.path.getmtime)
for img in glob.glob(f'{latest_folder}/*.jpg')[:3]:
    display(IPyImage(filename=img, width=600))
    print("\n")

from IPython.display import Image, display

# مسار النموذج المدرب
model_path = "/content/runs/detect/train/weights/best.pt"

# اسم الصورة على Colab
img_name = "/content/bad.jpg"

# تشغيل YOLO على الصورة
!yolo task=detect mode=predict model={model_path} source={img_name} save=True

# عرض الصورة بعد التنبؤ
predicted_img_path = "/content/runs/detect/predict4/bad.jpg"
display(Image(predicted_img_path))

"""## Deploy model on Roboflow

"""

project.version(dataset.version).deploy(model_type="yolov11", model_path=f"{HOME}/runs/detect/train/")

!pip install inference

import os, random, cv2
import supervision as sv
import IPython
import inference

model_id = "coffee-beans-cofind-owops-qkb7f/4"
api_key = "H3uNloapGePGyjUpHsqm"

model = inference.get_model(model_id, api_key)


test_set_loc = "/content/datasets/coffee-beans-cofind-4/test/images/"
test_images = os.listdir(test_set_loc)


for img_name in random.sample(test_images, min(4, len(test_images))):
    print("Running inference on " + img_name)


    image = cv2.imread(os.path.join(test_set_loc, img_name))


    results = model.infer(image, confidence=0.4, overlap=30)[0]
    detections = sv.Detections.from_inference(results)


    box_annotator = sv.BoxAnnotator()
    label_annotator = sv.LabelAnnotator()
    annotated_image = box_annotator.annotate(scene=image, detections=detections)
    annotated_image = label_annotator.annotate(scene=annotated_image, detections=detections)


    _, ret = cv2.imencode('.jpg', annotated_image)
    i = IPython.display.Image(data=ret)
    IPython.display.display(i)